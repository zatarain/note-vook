name: CI/CD Pipeline
on:
  push:
    branches: [main, staging, development]
  pull_request:
    branches: [main]
    types: [opened, synchronize]
  
jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: test
      GOMOD: ${{ github.workspace }}/go.mod
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Installing go
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20.0'
      - name: Installing dependencies
        run: |
          go mod tidy
          go get -u golang.org/x/lint/golint
          go install golang.org/x/lint/golint
          go install github.com/joho/godotenv/cmd/godotenv@latest
      - name: Run Vet & Lint
        run: |
          go vet .
          golint -set_exit_status=1 .
      - name: Build
        run: go build .
      - name: Run test cases with coverage
        run: godotenv -f "$ENVIRONMENT.env" go test -v -coverprofile=coverage.txt -covermode=atomic ./...
      - name: Upload coverage report to CodeCov 
        uses: codecov/codecov-action@v3
              
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          tags: ${{ github.repository }}:latest
